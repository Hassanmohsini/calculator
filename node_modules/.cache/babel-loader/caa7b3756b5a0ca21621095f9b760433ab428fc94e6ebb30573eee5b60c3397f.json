{"ast":null,"code":"// import React, { useState } from \"react\";\n// import ButtonsContainer from \"./components/ButtonsContainer\";\n// import DisplayContainer from \"./components/DisplayContainer\";\n// import \"./styles.css\";\n\n// function App() {\n//   const [display, setDisplay] = useState(\"\");\n//   const [result, setResult] = useState(\"\");\n\n//   function handleClick(e) {\n//     const targetValue = e.target.name;\n//     setDisplay(display + targetValue);\n//   }\n\n//   function operatorClick(operator) {\n//     let lastCharacter = display.slice(-2);\n//     let operatorsArray = [\"+ \", \"- \", \"* \", \"/ \"];\n\n//     console.log(lastCharacter);\n\n//     if (display === \"\" || operatorsArray.includes(lastCharacter)) return;\n\n//     setDisplay((prevDisplay) => {\n//       return prevDisplay + \" \" + operator + \" \";\n//     });\n//   }\n\n//   function handleEqual() {\n//     if (display.slice(-2).includes(\"+ \", \"- \", \"* \", \"/ \")) return;\n\n//     setDisplay(\"\");\n\n//     try {\n//       const resultValue = calculate(display);\n//       setResult(resultValue);\n//     } catch (error) {\n//       setDisplay(\"Error\");\n//     }\n//   }\n\n//   function calculate(expression) {\n//     const tokens = expression.split(\" \");\n//     let resultValue = parseInt(tokens[0]);\n\n//     for (let i = 1; i < tokens.length; i += 2) {\n//       const operator = tokens[i];\n//       const nextNumber = parseInt(tokens[i + 1]);\n\n//       switch (operator) {\n//         case \"+\":\n//           resultValue += nextNumber;\n//           break;\n//         case \"-\":\n//           resultValue -= nextNumber;\n//           break;\n//         case \"*\":\n//           resultValue *= nextNumber;\n//           break;\n//         case \"/\":\n//           resultValue /= nextNumber;\n//           break;\n//         default:\n//           resultValue = \"Error\";\n//       }\n//     }\n//     return resultValue;\n//   }\n\n//   function clear() {\n//     setDisplay(\"\");\n//     setResult(\"\");\n//   }\n\n//   function backspace() {\n//     setDisplay(display.slice(0, -1));\n//   }\n\n//   return (\n//     <>\n//       <div className=\"container\">\n//         <div className=\"calculator\">\n//           <DisplayContainer\n//             display={display}\n//             result={result}\n//             backspace={backspace}\n//             clear={clear}\n//           />\n//           <ButtonsContainer\n//             operatorClick={operatorClick}\n//             handleClick={handleClick}\n//             handleEqual={handleEqual}\n//           />\n//           <p className=\"text-white\">Created by Abdur Rehman</p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/home/dci-student/DCI-Webdev-course/Projects on Github/Simple-Calculator-1/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import ButtonsContainer from \"./components/ButtonsContainer\";\n// import DisplayContainer from \"./components/DisplayContainer\";\n// import \"./styles.css\";\n\n// function App() {\n//   const [display, setDisplay] = useState(\"\");\n//   const [result, setResult] = useState(\"\");\n\n//   function handleClick(e) {\n//     const targetValue = e.target.name;\n//     setDisplay(display + targetValue);\n//   }\n\n//   function operatorClick(operator) {\n//     let lastCharacter = display.slice(-2);\n//     let operatorsArray = [\"+ \", \"- \", \"* \", \"/ \"];\n\n//     console.log(lastCharacter);\n\n//     if (display === \"\" || operatorsArray.includes(lastCharacter)) return;\n\n//     setDisplay((prevDisplay) => {\n//       return prevDisplay + \" \" + operator + \" \";\n//     });\n//   }\n\n//   function handleEqual() {\n//     if (display.slice(-2).includes(\"+ \", \"- \", \"* \", \"/ \")) return;\n\n//     setDisplay(\"\");\n\n//     try {\n//       const resultValue = calculate(display);\n//       setResult(resultValue);\n//     } catch (error) {\n//       setDisplay(\"Error\");\n//     }\n//   }\n\n//   function calculate(expression) {\n//     const tokens = expression.split(\" \");\n//     let resultValue = parseInt(tokens[0]);\n\n//     for (let i = 1; i < tokens.length; i += 2) {\n//       const operator = tokens[i];\n//       const nextNumber = parseInt(tokens[i + 1]);\n\n//       switch (operator) {\n//         case \"+\":\n//           resultValue += nextNumber;\n//           break;\n//         case \"-\":\n//           resultValue -= nextNumber;\n//           break;\n//         case \"*\":\n//           resultValue *= nextNumber;\n//           break;\n//         case \"/\":\n//           resultValue /= nextNumber;\n//           break;\n//         default:\n//           resultValue = \"Error\";\n//       }\n//     }\n//     return resultValue;\n//   }\n\n//   function clear() {\n//     setDisplay(\"\");\n//     setResult(\"\");\n//   }\n\n//   function backspace() {\n//     setDisplay(display.slice(0, -1));\n//   }\n\n//   return (\n//     <>\n//       <div className=\"container\">\n//         <div className=\"calculator\">\n//           <DisplayContainer\n//             display={display}\n//             result={result}\n//             backspace={backspace}\n//             clear={clear}\n//           />\n//           <ButtonsContainer\n//             operatorClick={operatorClick}\n//             handleClick={handleClick}\n//             handleEqual={handleEqual}\n//           />\n//           <p className=\"text-white\">Created by Abdur Rehman</p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\n\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}